# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_vpysdk', [dirname(__file__)])
        except ImportError:
            import _vpysdk
            return _vpysdk
        if fp is not None:
            try:
                _mod = imp.load_module('_vpysdk', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _vpysdk = swig_import_helper()
    del swig_import_helper
else:
    import _vpysdk
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


RC_SUCCESS = _vpysdk.RC_SUCCESS
RC_VERSION_MISMATCH = _vpysdk.RC_VERSION_MISMATCH
RC_NOT_INITIALIZED = _vpysdk.RC_NOT_INITIALIZED
RC_ALREADY_INITIALIZED = _vpysdk.RC_ALREADY_INITIALIZED
RC_STRING_TOO_LONG = _vpysdk.RC_STRING_TOO_LONG
RC_INVALID_LOGIN = _vpysdk.RC_INVALID_LOGIN
RC_WORLD_NOT_FOUND = _vpysdk.RC_WORLD_NOT_FOUND
RC_WORLD_LOGIN_ERROR = _vpysdk.RC_WORLD_LOGIN_ERROR
RC_NOT_IN_WORLD = _vpysdk.RC_NOT_IN_WORLD
RC_CONNECTION_ERROR = _vpysdk.RC_CONNECTION_ERROR
RC_NO_INSTANCE = _vpysdk.RC_NO_INSTANCE
RC_NOT_IMPLEMENTED = _vpysdk.RC_NOT_IMPLEMENTED
RC_NO_SUCH_ATTRIBUTE = _vpysdk.RC_NO_SUCH_ATTRIBUTE
RC_NOT_ALLOWED = _vpysdk.RC_NOT_ALLOWED
RC_DATABASE_ERROR = _vpysdk.RC_DATABASE_ERROR
RC_NO_SUCH_USER = _vpysdk.RC_NO_SUCH_USER
RC_TIMEOUT = _vpysdk.RC_TIMEOUT
RC_NOT_IN_UNIVERSE = _vpysdk.RC_NOT_IN_UNIVERSE
RC_INVALID_ARGUMENTS = _vpysdk.RC_INVALID_ARGUMENTS
class create(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, create, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, create, name)
    __repr__ = _swig_repr
    __swig_setmethods__["instance"] = _vpysdk.create_instance_set
    __swig_getmethods__["instance"] = _vpysdk.create_instance_get
    if _newclass:instance = _swig_property(_vpysdk.create_instance_get, _vpysdk.create_instance_set)
    def __init__(self): 
        this = _vpysdk.new_create()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vpysdk.delete_create
    __del__ = lambda self : None;
    def destroy(self): return _vpysdk.create_destroy(self)
    def connect(self, *args): return _vpysdk.create_connect(self, *args)
    def login(self, *args): return _vpysdk.create_login(self, *args)
    def wait(self, *args): return _vpysdk.create_wait(self, *args)
    def enter(self, *args): return _vpysdk.create_enter(self, *args)
    def leave(self): return _vpysdk.create_leave(self)
    def say(self, *args): return _vpysdk.create_say(self, *args)
    def console_message(self, *args): return _vpysdk.create_console_message(self, *args)
    def event_set(self, *args): return _vpysdk.create_event_set(self, *args)
    def callback_set(self, *args): return _vpysdk.create_callback_set(self, *args)
    def user_data(self): return _vpysdk.create_user_data(self)
    def user_data_set(self, *args): return _vpysdk.create_user_data_set(self, *args)
    def state_change(self): return _vpysdk.create_state_change(self)
    def int_get(self, *args): return _vpysdk.create_int_get(self, *args)
    def float_get(self, *args): return _vpysdk.create_float_get(self, *args)
    def string_get(self, *args): return _vpysdk.create_string_get(self, *args)
    def data_get(self, *args): return _vpysdk.create_data_get(self, *args)
    def int_set(self, *args): return _vpysdk.create_int_set(self, *args)
    def float_set(self, *args): return _vpysdk.create_float_set(self, *args)
    def string_set(self, *args): return _vpysdk.create_string_set(self, *args)
    def data_set(self, *args): return _vpysdk.create_data_set(self, *args)
    def query_cell(self, *args): return _vpysdk.create_query_cell(self, *args)
    def object_add(self): return _vpysdk.create_object_add(self)
    def object_change(self): return _vpysdk.create_object_change(self)
    def object_delete(self): return _vpysdk.create_object_delete(self)
    def object_click(self): return _vpysdk.create_object_click(self)
    def world_list(self, *args): return _vpysdk.create_world_list(self, *args)
    def user_attributes_by_id(self, *args): return _vpysdk.create_user_attributes_by_id(self, *args)
    def user_attributes_by_name(self, *args): return _vpysdk.create_user_attributes_by_name(self, *args)
    def friends_get(self): return _vpysdk.create_friends_get(self)
    def friend_add_by_name(self, *args): return _vpysdk.create_friend_add_by_name(self, *args)
    def friend_delete(self, *args): return _vpysdk.create_friend_delete(self, *args)
    def terrain_query(self, *args): return _vpysdk.create_terrain_query(self, *args)
    def terrain_node_set(self, *args): return _vpysdk.create_terrain_node_set(self, *args)
    def avatar_click(self, *args): return _vpysdk.create_avatar_click(self, *args)
    def teleport_avatar(self, *args): return _vpysdk.create_teleport_avatar(self, *args)
create_swigregister = _vpysdk.create_swigregister
create_swigregister(create)

SDK_VERSION = _vpysdk.SDK_VERSION
EVENT_CHAT = _vpysdk.EVENT_CHAT
EVENT_AVATAR_ADD = _vpysdk.EVENT_AVATAR_ADD
EVENT_AVATAR_CHANGE = _vpysdk.EVENT_AVATAR_CHANGE
EVENT_AVATAR_DELETE = _vpysdk.EVENT_AVATAR_DELETE
EVENT_OBJECT = _vpysdk.EVENT_OBJECT
EVENT_OBJECT_CHANGE = _vpysdk.EVENT_OBJECT_CHANGE
EVENT_OBJECT_DELETE = _vpysdk.EVENT_OBJECT_DELETE
EVENT_OBJECT_CLICK = _vpysdk.EVENT_OBJECT_CLICK
EVENT_WORLD_LIST = _vpysdk.EVENT_WORLD_LIST
EVENT_WORLD_SETTING = _vpysdk.EVENT_WORLD_SETTING
EVENT_WORLD_SETTINGS_CHANGED = _vpysdk.EVENT_WORLD_SETTINGS_CHANGED
EVENT_FRIEND = _vpysdk.EVENT_FRIEND
EVENT_WORLD_DISCONNECT = _vpysdk.EVENT_WORLD_DISCONNECT
EVENT_UNIVERSE_DISCONNECT = _vpysdk.EVENT_UNIVERSE_DISCONNECT
EVENT_USER_ATTRIBUTES = _vpysdk.EVENT_USER_ATTRIBUTES
EVENT_CELL_END = _vpysdk.EVENT_CELL_END
EVENT_TERRAIN_NODE = _vpysdk.EVENT_TERRAIN_NODE
EVENT_AVATAR_CLICK = _vpysdk.EVENT_AVATAR_CLICK
EVENT_TELEPORT = _vpysdk.EVENT_TELEPORT
HIGHEST_EVENT = _vpysdk.HIGHEST_EVENT
CALLBACK_OBJECT_ADD = _vpysdk.CALLBACK_OBJECT_ADD
CALLBACK_OBJECT_CHANGE = _vpysdk.CALLBACK_OBJECT_CHANGE
CALLBACK_OBJECT_DELETE = _vpysdk.CALLBACK_OBJECT_DELETE
CALLBACK_GET_FRIENDS = _vpysdk.CALLBACK_GET_FRIENDS
CALLBACK_FRIEND_ADD = _vpysdk.CALLBACK_FRIEND_ADD
CALLBACK_FRIEND_DELETE = _vpysdk.CALLBACK_FRIEND_DELETE
CALLBACK_TERRAIN_QUERY = _vpysdk.CALLBACK_TERRAIN_QUERY
CALLBACK_TERRAIN_NODE_SET = _vpysdk.CALLBACK_TERRAIN_NODE_SET
HIGHEST_CALLBACK = _vpysdk.HIGHEST_CALLBACK
AVATAR_SESSION = _vpysdk.AVATAR_SESSION
AVATAR_TYPE = _vpysdk.AVATAR_TYPE
MY_TYPE = _vpysdk.MY_TYPE
OBJECT_ID = _vpysdk.OBJECT_ID
OBJECT_TYPE = _vpysdk.OBJECT_TYPE
OBJECT_TIME = _vpysdk.OBJECT_TIME
OBJECT_USER_ID = _vpysdk.OBJECT_USER_ID
WORLD_STATE = _vpysdk.WORLD_STATE
WORLD_USERS = _vpysdk.WORLD_USERS
REFERENCE_NUMBER = _vpysdk.REFERENCE_NUMBER
CALLBACK = _vpysdk.CALLBACK
USER_ID = _vpysdk.USER_ID
USER_REGISTRATION_TIME = _vpysdk.USER_REGISTRATION_TIME
USER_ONLINE_TIME = _vpysdk.USER_ONLINE_TIME
USER_LAST_LOGIN = _vpysdk.USER_LAST_LOGIN
FRIEND_ID = _vpysdk.FRIEND_ID
FRIEND_USER_ID = _vpysdk.FRIEND_USER_ID
FRIEND_ONLINE = _vpysdk.FRIEND_ONLINE
MY_USER_ID = _vpysdk.MY_USER_ID
PROXY_TYPE = _vpysdk.PROXY_TYPE
PROXY_PORT = _vpysdk.PROXY_PORT
CELL_X = _vpysdk.CELL_X
CELL_Z = _vpysdk.CELL_Z
TERRAIN_TILE_X = _vpysdk.TERRAIN_TILE_X
TERRAIN_TILE_Z = _vpysdk.TERRAIN_TILE_Z
TERRAIN_NODE_X = _vpysdk.TERRAIN_NODE_X
TERRAIN_NODE_Z = _vpysdk.TERRAIN_NODE_Z
TERRAIN_NODE_REVISION = _vpysdk.TERRAIN_NODE_REVISION
CLICKED_SESSION = _vpysdk.CLICKED_SESSION
CHAT_TYPE = _vpysdk.CHAT_TYPE
CHAT_COLOR_RED = _vpysdk.CHAT_COLOR_RED
CHAT_COLOR_GREEN = _vpysdk.CHAT_COLOR_GREEN
CHAT_COLOR_BLUE = _vpysdk.CHAT_COLOR_BLUE
CHAT_EFFECTS = _vpysdk.CHAT_EFFECTS
HIGHEST_INT = _vpysdk.HIGHEST_INT
AVATAR_X = _vpysdk.AVATAR_X
AVATAR_Y = _vpysdk.AVATAR_Y
AVATAR_Z = _vpysdk.AVATAR_Z
AVATAR_YAW = _vpysdk.AVATAR_YAW
AVATAR_PITCH = _vpysdk.AVATAR_PITCH
MY_X = _vpysdk.MY_X
MY_Y = _vpysdk.MY_Y
MY_Z = _vpysdk.MY_Z
MY_YAW = _vpysdk.MY_YAW
MY_PITCH = _vpysdk.MY_PITCH
OBJECT_X = _vpysdk.OBJECT_X
OBJECT_Y = _vpysdk.OBJECT_Y
OBJECT_Z = _vpysdk.OBJECT_Z
OBJECT_ROTATION_X = _vpysdk.OBJECT_ROTATION_X
OBJECT_ROTATION_Y = _vpysdk.OBJECT_ROTATION_Y
OBJECT_ROTATION_Z = _vpysdk.OBJECT_ROTATION_Z
OBJECT_YAW = _vpysdk.OBJECT_YAW
OBJECT_PITCH = _vpysdk.OBJECT_PITCH
OBJECT_ROLL = _vpysdk.OBJECT_ROLL
OBJECT_ROTATION_ANGLE = _vpysdk.OBJECT_ROTATION_ANGLE
TELEPORT_X = _vpysdk.TELEPORT_X
TELEPORT_Y = _vpysdk.TELEPORT_Y
TELEPORT_Z = _vpysdk.TELEPORT_Z
TELEPORT_YAW = _vpysdk.TELEPORT_YAW
TELEPORT_PITCH = _vpysdk.TELEPORT_PITCH
CLICK_HIT_X = _vpysdk.CLICK_HIT_X
CLICK_HIT_Y = _vpysdk.CLICK_HIT_Y
CLICK_HIT_Z = _vpysdk.CLICK_HIT_Z
HIGHEST_FLOAT = _vpysdk.HIGHEST_FLOAT
AVATAR_NAME = _vpysdk.AVATAR_NAME
CHAT_MESSAGE = _vpysdk.CHAT_MESSAGE
OBJECT_MODEL = _vpysdk.OBJECT_MODEL
OBJECT_ACTION = _vpysdk.OBJECT_ACTION
OBJECT_DESCRIPTION = _vpysdk.OBJECT_DESCRIPTION
WORLD_NAME = _vpysdk.WORLD_NAME
USER_NAME = _vpysdk.USER_NAME
USER_EMAIL = _vpysdk.USER_EMAIL
WORLD_SETTING_KEY = _vpysdk.WORLD_SETTING_KEY
WORLD_SETTING_VALUE = _vpysdk.WORLD_SETTING_VALUE
FRIEND_NAME = _vpysdk.FRIEND_NAME
PROXY_HOST = _vpysdk.PROXY_HOST
TELEPORT_WORLD = _vpysdk.TELEPORT_WORLD
HIGHEST_STRING = _vpysdk.HIGHEST_STRING
OBJECT_DATA = _vpysdk.OBJECT_DATA
TERRAIN_NODE_DATA = _vpysdk.TERRAIN_NODE_DATA
HIGHEST_DATA = _vpysdk.HIGHEST_DATA
PROXY_TYPE_NONE = _vpysdk.PROXY_TYPE_NONE
PROXY_TYPE_SOCKS4A = _vpysdk.PROXY_TYPE_SOCKS4A
class TerrainCell(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TerrainCell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TerrainCell, name)
    __repr__ = _swig_repr
    __swig_setmethods__["height"] = _vpysdk.TerrainCell_height_set
    __swig_getmethods__["height"] = _vpysdk.TerrainCell_height_get
    if _newclass:height = _swig_property(_vpysdk.TerrainCell_height_get, _vpysdk.TerrainCell_height_set)
    __swig_setmethods__["attributes"] = _vpysdk.TerrainCell_attributes_set
    __swig_getmethods__["attributes"] = _vpysdk.TerrainCell_attributes_get
    if _newclass:attributes = _swig_property(_vpysdk.TerrainCell_attributes_get, _vpysdk.TerrainCell_attributes_set)
    def __init__(self, height=0, tex=0, rotate=0, visible=0): 
        this = _vpysdk.new_TerrainCell(height, tex, rotate, visible)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vpysdk.delete_TerrainCell
    __del__ = lambda self : None;
    def apply(self, *args): return _vpysdk.TerrainCell_apply(self, *args)
    def _texture_set(self, *args): return _vpysdk.TerrainCell__texture_set(self, *args)
    def _rotation_set(self, *args): return _vpysdk.TerrainCell__rotation_set(self, *args)
    def _visibility_set(self, *args): return _vpysdk.TerrainCell__visibility_set(self, *args)
    def _texture_get(self): return _vpysdk.TerrainCell__texture_get(self)
    def _rotation_get(self): return _vpysdk.TerrainCell__rotation_get(self)
    def _visibility_get(self): return _vpysdk.TerrainCell__visibility_get(self)
    __swig_getmethods__["texture"] = _texture_get
    __swig_setmethods__["texture"] = _texture_set
    if _newclass:texture = property(_texture_get, _texture_set)

    __swig_getmethods__["rotation"] = _rotation_get
    __swig_setmethods__["rotation"] = _rotation_set
    if _newclass:rotation = property(_rotation_get, _rotation_set)

    __swig_getmethods__["visibility"] = _visibility_get
    __swig_setmethods__["visibility"] = _visibility_set
    if _newclass:visibility = property(_visibility_get, _visibility_set)

TerrainCell_swigregister = _vpysdk.TerrainCell_swigregister
TerrainCell_swigregister(TerrainCell)

CHAT_NORMAL = _vpysdk.CHAT_NORMAL
CHAT_CONSOLE_MESSAGE = _vpysdk.CHAT_CONSOLE_MESSAGE
CHAT_PRIVATE = _vpysdk.CHAT_PRIVATE
TEXT_EFFECT_BOLD = _vpysdk.TEXT_EFFECT_BOLD
TEXT_EFFECT_ITALIC = _vpysdk.TEXT_EFFECT_ITALIC
# This file is compatible with both classic and new-style classes.


